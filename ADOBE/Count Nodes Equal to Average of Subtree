Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:

The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.
 

Example 1:


Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.
Example 2:


Input: root = [1]
Output: 1
Explanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000

code:-
class Solution {
    int dfs(TreeNode* root, int &sum, int &count){
        if(root == NULL){
            sum = 0, count = 0;
            return 0;
        }

        int sum1 = 0, count1 = 0, sum2 = 0, count2 = 0;
        int ans1 = dfs(root->left, sum1, count1);
        int ans2 = dfs(root->right, sum2, count2);

        int ans = ans1+ans2;
        sum = sum1+sum2+root->val;
        count = count1+count2+1;
        int avg = (sum/(double)count);

        if(avg == root->val)
            ans++;

        return ans;
    }
public:
    int averageOfSubtree(TreeNode* root) {
        int sum, count;

        return dfs(root, sum, count);
    }
};
