Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

SOLN:-
class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int n=points.size();
        int maxi=0;
        for(int i=0;i<n;i++){
            int dup=0;
            map<pair<int,int>,int> slope;
            for(int j=i;j<n;j++){
                int dy=points[i][1]-points[j][1];
                int dx=points[i][0]-points[j][0];
                if(dy==0 && dx==0) dup++;
                else{
                    int gg= __gcd(dy,dx);
                    dy/=gg;
                    dx/=gg;
                    slope[{dy,dx}]++;

                }
                
            }
            maxi=max(maxi,dup);
            for(auto it:slope){
                maxi=max(maxi,it.second+dup);

            }
        }
        return maxi;
    }
};
