You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Return the number of boomerangs.

 

Example 1:

Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].
Example 2:

Input: points = [[1,1],[2,2],[3,3]]
Output: 2
Example 3:

Input: points = [[1,1]]
Output: 0
 

Constraints:

n == points.length
1 <= n <= 500
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.

SOLN:-
class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        
        int cnt = 0, n = points.size();
        for(int i = 0; i < n; i++)
        {
            map<int, int> mp;
            for(int j = 0; j < n; j++)
            {
                if(i == j)
                    continue;
                
                int tmp = findDistance(points[i], points[j]);
                if(mp.find(tmp) != mp.end())
                    cnt += mp[tmp] * 2; // 2 is multiplied bcoz the order of j & k can be k & j also
                
                mp[tmp]++;
            }
        }
         
        return cnt;
    }
    
    int findDistance(vector<int> &p1, vector<int> &p2)
    {
        return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    }
};
